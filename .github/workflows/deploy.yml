name: Deploy to EKS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-2
      CLUSTER_NAME: cmm707-cluster
      ECR_REGISTRY: 734842486567.dkr.ecr.us-east-2.amazonaws.com
      IMAGE_NAME: cmm707/frontend

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
            docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: Build and push Docker image
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:latest .
          docker push $ECR_REGISTRY/$IMAGE_NAME:latest

      - name: Generate static kubeconfig
        run: |
          ENDPOINT=$(aws eks describe-cluster --name $CLUSTER_NAME \
            --region $AWS_REGION --query "cluster.endpoint" --output text)

          TOKEN=$(aws eks get-token --cluster-name $CLUSTER_NAME \
            --region $AWS_REGION --query "status.token" --output text)

          mkdir -p ~/.kube

          cat <<EOF > ~/.kube/config
          apiVersion: v1
          kind: Config
          clusters:
          - cluster:
              server: $ENDPOINT
              insecure-skip-tls-verify: true
            name: eks
          users:
          - name: eks-user
            user:
              token: $TOKEN
          contexts:
          - context:
              cluster: eks
              user: eks-user
            name: eks-context
          current-context: eks-context
          EOF

      - name: Deploy to EKS
        run: |
          kubectl apply --validate=false -f k8s/frontend-service.yaml
          kubectl apply --validate=false -f k8s/frontend-deployment.yaml