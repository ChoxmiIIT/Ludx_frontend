name: Deploy to EKS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 734842486567.dkr.ecr.us-east-2.amazonaws.com

      - name: Build and push Docker image
        run: |
          docker build -t 734842486567.dkr.ecr.us-east-2.amazonaws.com/cmm707/frontend:latest .
          docker push 734842486567.dkr.ecr.us-east-2.amazonaws.com/cmm707/frontend:latest

      - name: Get cluster endpoint
        id: cluster
        run: |
          echo "ENDPOINT=$(aws eks describe-cluster --name cmm707-cluster --query "cluster.endpoint" --output text)" >> $GITHUB_ENV

      - name: Get token and configure kubeconfig
        run: |
          export KUBE_TOKEN=$(aws eks get-token --cluster-name cmm707-cluster --region us-east-2 --query "status.token" --output text)

          kubectl config set-cluster cmm707-cluster --server=${ENDPOINT} --insecure-skip-tls-verify=true
          kubectl config set-credentials ci-user --token="$KUBE_TOKEN"
          kubectl config set-context ci-context --cluster=cmm707-cluster --user=ci-user
          kubectl config use-context ci-context

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/frontend-service.yaml
          kubectl apply -f k8s/frontend-deployment.yaml